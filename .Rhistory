scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
View(scores2)
install.packages("plotly")
library(plotly)
plot_ly(x = OFFENSE, y = DEFENSE, z = simulated, type = "scatter3d", mode = "markers", color = simulated)
plot_ly(x = OFFENSE, y = DEFENSE, z = simulated, type = "scatter3d", mode = "markers", color = simulated, data = scores2)
plot_ly(x = scores2$OFFENSE, y = scores2$DEFENSE, z = scores2$simulated, type = "scatter3d", mode = "markers", color = scores2$simulated)
plot(scores2$simulated, scores2$OFFENSE)
plot(scores2$V2, scores2$simulated)
plot(scores2$V2, scores2$OFFENSE)
plot(scores2$V2, scores2$DEFENSE)
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
data2 <- openxlsx::read.xlsx("NCAA1819.xlsx", colNames = TRUE, startRow = 2)
data2 <- data2[, -1]
conf <- read.csv("teams.csv", header = FALSE)
rownames(data2) <- data2[, 1]
data2 <- data2[, -1]
rownames(data2) <- gsub("NCAA", "", rownames(data2))
data2 <- data2[(complete.cases(data2)), ]
data2 <- janitor::clean_names(data2)
offense_data <- subset(data2, select = c(tm, pace, o_rtg, f_tr, x3p_ar, ts_percent, trb_percent, ast_percent, e_fg_percent, ft_fga))
pr_offense <- principal(offense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_offense <- as.data.frame(pr_offense$scores)
names(pr_offense)[names(pr_offense) == "PC1"] <- "OFFENSE"
View(pr_offense)
defense_data <- subset(data2, select = c(stl_percent, blk_percent, tov_percent, orb_percent))
pr_defense <- principal(defense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_defense <- as.data.frame(pr_defense$scores)
names(pr_defense)[names(pr_defense) == "PC1"] <- "DEFENSE"
View(pr_offense)
scores2 <- as.data.frame(cbind(data2, pr_offense, pr_defense))
scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
View(scores2)
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
openxlsx::write.xlsx(scores2, file = "../ncaa_bracket/teams.xlsx")
setwd("../..")
openxlsx::write.xlsx(scores2, file = "/ncaa_bracket/teams.xlsx")
openxlsx::write.xlsx(scores2, file = "ncaa_bracket/teams.xlsx")
rsconnect::deployApp("ncaa_bracket")
names(scores2)
test <- scores2
test$new_metric <- mean(OFFENSE, DEFENSE, simulated)
test$new_metric <- mean(test$OFFENSE, test$DEFENSE, test$simulated)
test$new_metric <- mean(c(test$OFFENSE, test$DEFENSE, test$simulated))
View(test)
?rmean
rowMeans()
?row.Means
?rowMeans
test$new_metric <- rowMeans(c(test$OFFENSE, test$DEFENSE, test$simulated))
test$new_metric <- rowMeans(test$OFFENSE, test$DEFENSE, test$simulated)
test <- rowMeans(test[3:5])
test$new_metric <- mean(test$OFFENSE, test$DEFENSE, test$simulated)
test <- scores2
test$newmetric <- rowMeans(test[3:5])
rm(test)
library(plotly)
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated)
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, colors = V2) %>% add_markers()
View(scores2)
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, colors = ~V2) %>% add_markers()
require(devtools)
install_version("plotly", version = "4.5.6")
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, colors = ~V2) %>% add_markers()
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
data2 <- openxlsx::read.xlsx("NCAA1819.xlsx", colNames = TRUE, startRow = 2)
data2 <- data2[, -1]
conf <- read.csv("teams.csv", header = FALSE)
rownames(data2) <- data2[, 1]
data2 <- data2[, -1]
rownames(data2) <- gsub("NCAA", "", rownames(data2))
data2 <- data2[(complete.cases(data2)), ]
data2 <- janitor::clean_names(data2)
offense_data <- subset(data2, select = c(tm, pace, o_rtg, f_tr, x3p_ar, ts_percent, trb_percent, ast_percent, e_fg_percent, ft_fga))
pr_offense <- principal(offense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_offense <- as.data.frame(pr_offense$scores)
names(pr_offense)[names(pr_offense) == "PC1"] <- "OFFENSE"
defense_data <- subset(data2, select = c(stl_percent, blk_percent, tov_percent, orb_percent))
pr_defense <- principal(defense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_defense <- as.data.frame(pr_defense$scores)
names(pr_defense)[names(pr_defense) == "PC1"] <- "DEFENSE"
scores2 <- as.data.frame(cbind(data2, pr_offense, pr_defense))
scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
View(offense_data)
View(scores2)
setwd("../..")
openxlsx::write.xlsx(scores2, file = "ncaa_bracket/teams.xlsx")
rsconnect::deployApp("ncaa_bracket")
devtools::install_github("AckerDWM/gg3D")
library("gg3D")
ggplot(scores2, aes(x = OFFENSE, y = DEFENSE, z = simulated, color = V2)) +
theme_void() +
axes_3D() +
stat_3D()
ggplot(scores2, aes(x = OFFENSE, y = DEFENSE, z = simulated)) +
theme_void() +
axes_3D() +
stat_3D()
require(devtools)
install_version("plotly", version = "4.5.6", repos = "http://cran.us.r-project.org")
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
data2 <- openxlsx::read.xlsx("NCAA1819.xlsx", colNames = TRUE, startRow = 2)
data2 <- data2[, -1]
conf <- read.csv("teams.csv", header = FALSE)
rownames(data2) <- data2[, 1]
data2 <- data2[, -1]
rownames(data2) <- gsub("NCAA", "", rownames(data2))
data2 <- data2[(complete.cases(data2)), ]
data2 <- janitor::clean_names(data2)
offense_data <- subset(data2, select = c(tm, pace, o_rtg, f_tr, x3p_ar, ts_percent, trb_percent, ast_percent, e_fg_percent, ft_fga))
pr_offense <- principal(offense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_offense <- as.data.frame(pr_offense$scores)
names(pr_offense)[names(pr_offense) == "PC1"] <- "OFFENSE"
defense_data <- subset(data2, select = c(stl_percent, blk_percent, tov_percent, orb_percent))
pr_defense <- principal(defense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_defense <- as.data.frame(pr_defense$scores)
names(pr_defense)[names(pr_defense) == "PC1"] <- "DEFENSE"
scores2 <- as.data.frame(cbind(data2, pr_offense, pr_defense))
scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
library(plotly)
plot_ly(type = "scatter3d", x = OFFENSE, y = DEFENSE, z = simulated, mode = "markers")
plot_ly(type = "scatter3d", x = OFFENSE, y = DEFENSE, z = simulated, mode = "markers", data = scores2)
View(scores2)
View(scores2)
plot_ly(type = "scatter3d", x = scores2$OFFENSE, y = scores2$DEFENSE, z = scores2$simulated, mode = "markers")
package_info(plot_ly())
package_info(plot_ly)
install_version("plotly", version = "4.5.6", repos = "http://cran.us.r-project.org")
plot_ly(type = "scatter3d", x = scores2$OFFENSE, y = scores2$DEFENSE, z = scores2$simulated, mode = "markers")
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, color = ~V2) %>%
add_markers()
plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, color = ~V2) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Offense'),
yaxis = list(title = 'Defense'),
zaxis = list(title = 'Simulated Score')))
install.packages("rgl")
Sys.setenv("plotly_username" = "ericliamshannon")
Sys.setenv("plotly_api_key" = "••••••••••")
p <- plot_ly(scores2, x = ~OFFENSE, y = ~DEFENSE, z = ~simulated, color = ~V2) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Offense'),
yaxis = list(title = 'Defense'),
zaxis = list(title = 'Simulated Score')))
api_create(p, filename = "ncaa-scatter-plot")
library(plotly)
api_create(p, filename = "ncaa-scatter-plot")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
data2 <- openxlsx::read.xlsx("NCAA1819.xlsx", colNames = TRUE, startRow = 2)
data2 <- data2[, -1]
conf <- read.csv("teams.csv", header = FALSE)
rownames(data2) <- data2[, 1]
data2 <- data2[, -1]
rownames(data2) <- gsub("NCAA", "", rownames(data2))
data2 <- data2[(complete.cases(data2)), ]
data2 <- janitor::clean_names(data2)
offense_data <- subset(data2, select = c(tm, pace, o_rtg, f_tr, x3p_ar, ts_percent, trb_percent, ast_percent, e_fg_percent, ft_fga))
pr_offense <- principal(offense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_offense <- as.data.frame(pr_offense$scores)
names(pr_offense)[names(pr_offense) == "PC1"] <- "OFFENSE"
defense_data <- subset(data2, select = c(stl_percent, blk_percent, tov_percent, orb_percent))
pr_defense <- principal(defense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_defense <- as.data.frame(pr_defense$scores)
names(pr_defense)[names(pr_defense) == "PC1"] <- "DEFENSE"
scores2 <- as.data.frame(cbind(data2, pr_offense, pr_defense))
scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
setwd("../..")
openxlsx::write.xlsx(scores2, file = "ncaa_bracket/teams.xlsx")
rsconnect::deployApp("ncaa_bracket")
openxlsx::write.xlsx(scores2, file = "ncaa_plot/teams.xlsx")
rsconnect::deployApp("ncaa_plot")
rsconnect::deployApp("ncaa_plot")
rsconnect::deployApp("ncaa_plot")
rsconnect::deployApp("ncaa_plot")
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
require(plotly)
setwd("~/Documents/ncaa_predictions")
require(ggplot2)
require(psych)
require(dplyr)
require(tibble)
require(plotly)
data2 <- openxlsx::read.xlsx("NCAA1819.xlsx", colNames = TRUE, startRow = 2)
data2 <- data2[, -1]
conf <- read.csv("teams.csv", header = FALSE)
rownames(data2) <- data2[, 1]
data2 <- data2[, -1]
rownames(data2) <- gsub("NCAA", "", rownames(data2))
data2 <- data2[(complete.cases(data2)), ]
data2 <- janitor::clean_names(data2)
offense_data <- subset(data2, select = c(tm, pace, o_rtg, f_tr, x3p_ar, ts_percent, trb_percent, ast_percent, e_fg_percent, ft_fga))
pr_offense <- principal(offense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_offense <- as.data.frame(pr_offense$scores)
names(pr_offense)[names(pr_offense) == "PC1"] <- "OFFENSE"
defense_data <- subset(data2, select = c(stl_percent, blk_percent, tov_percent, orb_percent))
pr_defense <- principal(defense_data, nfactors = 1, rotate = "varimax",
scores = TRUE, oblique.scores = FALSE, covar = TRUE)
pr_defense <- as.data.frame(pr_defense$scores)
names(pr_defense)[names(pr_defense) == "PC1"] <- "DEFENSE"
scores2 <- as.data.frame(cbind(data2, pr_offense, pr_defense))
scores2 <- subset(scores2, select = c(srs, w_l_percent, g, sos, OFFENSE, DEFENSE))
scores2 <- scores2 %>% rownames_to_column('V1')
scores2$V1 <- sub("^\\s+", "", scores2$V1)
scores2$V1 <- gsub("(^\\s+)|(\\s+$)", "", scores2$V1)
conf$V1 <- as.character(conf$V1)
conf$V1 <- sub("^\\s+", "", conf$V1)
conf$V1 <- gsub("(^\\s+)|(\\s+$)", "", conf$V1)
scores2 <- merge(x = scores2, y = conf, by = 'V1', sort = FALSE, all.x = TRUE)
conference_effect <- lme4::lmer(srs ~ sos + w_l_percent + g + DEFENSE + OFFENSE + (1 | V2), data = scores2)
scores2$simulated <- simulate(conference_effect, seed = 1, newdata = scores2, allow.new.levels = TRUE, re.form = NA)$sim_1
scores2 <- subset(scores2, select = c(V1, V2, OFFENSE, DEFENSE, simulated))
scores2 <- scores2 %>%
mutate(simulatedR = dense_rank(desc(simulated))) %>%
column_to_rownames('V1')
scores2 <- scores2 %>%
rownames_to_column('team')
scores2$simulated <- scale(scores2$simulated)
scores2 <-
scores2 %>% mutate_at(vars(OFFENSE, DEFENSE, simulated), funs(round(. , 4)))
setwd("../..")
openxlsx::write.xlsx(scores2, file = "ncaa_bracket/teams.xlsx")
errors <- openxlsx::read.xlsx("error_predicts.xlsx")
errors <- openxlsx::read.xlsx("error_predics.xlsx")
setwd("~/Documents/ncaa_predictions")
errors <- openxlsx::read.xlsx("error_predics.xlsx")
names(scores2)
names(errors)
merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE)
errors <- openxlsx::read.xlsx("error_predics.xlsx")
merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE)
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE)
View(errors2)
scores2
View(scores2)
rm(errors2)
errors <- openxlsx::read.xlsx("error_predics.xlsx")
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE)
View(errors3)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y))
errors3 <- janitor::clean_names(errors3)
rm(c(errors, errors2, errors3))
rm(list(errors, errors2, errors3))
rm(errors)
rm(errors2)
rm(errors3)
errors <- openxlsx::read.xlsx("error_predics.xlsx")
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
View(errors)
View(errors2)
View(errors3)
rm(errors3)
rm(errors2)
rm(errors)
errors <- openxlsx::read.xlsx("error_predics.xlsx")
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE, sort = FALSE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE,
sort = FALSE)
View(errors3)
View(errors3)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
names(errors3) <- gsub(x = names(errors3), pattern = "x", replacement = "away")
names(errors3) <- gsub(x = names(errors3), pattern = "_y", replacement = "_home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score, "Away", "Home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted <- ifelse(errors3$simulated_away > errors3$simulated_home,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted = errors3$winner
rm(errors2)
rm(errors3)
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE, sort = FALSE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE,
sort = FALSE)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
names(errors3) <- gsub(x = names(errors3), pattern = "x", replacement = "away")
names(errors3) <- gsub(x = names(errors3), pattern = "_y", replacement = "_home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted <- ifelse(errors3$simulated_away > errors3$simulated_home,
as.character(errors3$away), as.character(errors3$home))
errors3$winner == errors3$predicted
View(scores2)
str(errors)
rm(errors2)
rm(errors3)
errors$Home <- sub("^\\s+", "", errors$Home)
errors$Home <- gsub("(^\\s+)|(\\s+$)", "", errors$Home)
errors$Away <- sub("^\\s+", "", errors$Away)
errors$Away <- gsub("(^\\s+)|(\\s+$)", "", errors$Away)
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE, sort = FALSE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE,
sort = FALSE)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
names(errors3) <- gsub(x = names(errors3), pattern = "x", replacement = "away")
names(errors3) <- gsub(x = names(errors3), pattern = "_y", replacement = "_home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted <- ifelse(errors3$simulated_away > errors3$simulated_home,
as.character(errors3$away), as.character(errors3$home))
View(errors3)
View(scores2)
rm(errors3)
rm(errors2)
errors <- openxlsx::read.xlsx("error_predics.xlsx")
errors$Home <- sub("^\\s+", "", errors$Home)
errors$Home <- gsub("(^\\s+)|(\\s+$)", "", errors$Home)
errors$Away <- sub("^\\s+", "", errors$Away)
errors$Away <- gsub("(^\\s+)|(\\s+$)", "", errors$Away)
errors2 <- merge(x = errors, y = scores2, by.x = "Away", by.y = "team", all.x = TRUE, sort = FALSE)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE,
sort = FALSE)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
names(errors3) <- gsub(x = names(errors3), pattern = "x", replacement = "away")
names(errors3) <- gsub(x = names(errors3), pattern = "_y", replacement = "_home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted <- ifelse(errors3$simulated_away > errors3$simulated_home,
as.character(errors3$away), as.character(errors3$home))
View(scores2)
View(errors3)
table(errors3$predicted == errors3$winner)
errors3$d_winner <- ifelse(errors3$defense_away > errors3$defense_home,
as.character(errors3$away), as.character(errors3$home))
table(errors3$d_winner == errors3$winner)
errors3$o_winner <- ifelse(errors3$offense_away > errors3$offense_home,
as.character(errors3$away), as.character(errors3$home))
table(errors3$o_winner == errors3$winner)
rm(errors3)
errors3 <- merge(x = errors2, y = scores2, by.x = "Home", by.y = "team", all.x = TRUE,
sort = FALSE)
errors3 <- subset(errors3, select = -c(simulatedR.x, simulatedR.y, V2.y, V2.x))
errors3 <- janitor::clean_names(errors3)
names(errors3) <- gsub(x = names(errors3), pattern = "x", replacement = "away")
names(errors3) <- gsub(x = names(errors3), pattern = "_y", replacement = "_home")
errors3$winner <- ifelse(errors3$away_score > errors3$home_score,
as.character(errors3$away), as.character(errors3$home))
errors3$predicted <- ifelse(errors3$simulated_away > errors3$simulated_home,
as.character(errors3$away), as.character(errors3$home))
errors3$d_predicted <- ifelse(errors3$defense_away > errors3$defense_home,
as.character(errors3$away), as.character(errors3$home))
errors3$o_predicted <- ifelse(errors3$offense_away > errors3$offense_home,
as.character(errors3$away), as.character(errors3$home))
plot(errors3$away_score, errors3$defense_home)
plot(errors3$defense_home, errors3$away_score)
plot(errors3$offense_home, errors3$home_score)
lm(home_score ~ offense_home + defense_away, data = errors3)
summary(lm(home_score ~ offense_home + defense_away, data = errors3))
summary(glm(home_score ~ offense_home + defense_away, data = errors3, family = "poisson"))
his(away_score)
hist(away_score)
hist(errors3$away_score)
hist(errors3$home_score)
exp(coef(glm(home_score ~ offense_home + defense_away, data = errors3, family = "poisson"))
)
summary(lm(home_score ~ simulated_away + simulated_home, data = errors3))
rockchalk::summarizeNumerics(errors3)
install.packages("systemfit")
library(systemfit)
hreg <- home_score ~ simulated_away + simulated_home + defense_home + offense_home + defense_away + offense_away
areg <- away_score ~ simulated_away + simulated_home + defense_home + offense_home + defense_away + offense_away
fitsur <- systemfit(list(away = areg, home = hreg), data = errors3)
summary(fitsur)
?systemfit
fitsur <- systemfit(list(away = areg, home = hreg), data = errors3, method = "SUR")
summary(fitsur)
fitsur <- systemfit(list(away = areg, home = hreg), data = errors3, method = "3SLS")
fitsur <- systemfit(list(away = areg, home = hreg), data = errors3, method = "WLS")
summary(fitsur)
fitsur <- systemfit(list(away = areg, home = hreg), data = errors3, method = "SUR", pooled = TRUE)
summary(fitsur)
plot(errors3$home_score, errors3$simulated_home)
plot(errors3$simulated_home, errors3$home_score)
library(ggplot2)
qplot(simulated_home, home_Score)
qplot(simulated_home, home_score,)
qplot(simulated_home, home_score, data = errors3)
?qplot
qplot(simulated_home, home_score, data = errors3, geom = c("point", "smooth"))
qplot(simulated_home, home_score, data = errors3, colour = home)
names(errors2)
qplot(simulated_home, home_score, data = errors3, geom = c("point", "smooth"), method = "ols")
?stat_smooth
qplot(simulated_home, home_score, data = errors3, geom = c("point", "smooth"), method = "lm")
