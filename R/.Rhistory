summary(fit)
fit <- sem(myModel, data = combinedtables, std.lv = T, std.ov = F, orthogonal = T, auto.efa = T, cluster = "conference", sampling.weights = "games")
summary(fit)
as.data.frame(predictedValues)
fit <- sem(myModel, data = combinedtables, std.lv = T, std.ov = F, orthogonal = F, , cluster = "conference", sampling.weights = "games")
summary(fit)
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
require(lavaan)
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk
factorThree =~ tm + fg + fga + fg_percent + three_fg_percent + ft_percent + trb + blk + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE)
idx <- lavInspect(fit, "case.idx")
fscores <- lavPredict(fit, type = "lv")
for (fs in colnames(fscores)) {
combinedTables[idx, fs] <- fscores[, fs]
}
finalTables <- combinedTables %>% select(school, conf, games, w_l_percent, srs, sos, ap_rank,
factorOne, factorThree, generalFactor)
predictiveModel <- glmer(w_l_percent ~ srs + sos + ap_rank + factorOne +
factorThree + generalFactor + (1 | conf),
family = binomial(link = "probit"), weights = games, data = combinedTables)
finalTables$estimate <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE, fix.intercept.variance = TRUE)$fit
finalTables$lower <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE,
fix.intercept.variance = TRUE)$lwr
finalTables$upper <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE,
fix.intercept.variance = TRUE)$upr
finalTables <- finalTables %>% select(school, conf, estimate, upper, lower) %>%
mutate_if(is.numeric, round, digits = 3)
View(finalTables)
View(finalTables)
## Author: Dr. Eric William Shannon
## Date Edited: 20191213
## Purpose: FBS Winning Probabilities
## Cleaning the environment os I can load all of the packages
## that I need for this specific project. Creating the negative
## %in% function which is convenient for filtering purposes.
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
## Loading in the basic school statistics from sports-reference
## and then cleaning up the data into a data frame so that it
## is able to be used in the analysis.
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
## Loading in conference information as well as AP ratings for the
## multilevel model portions of the analysis.
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
## Combining the basic school statistics with the conference information/
## AP poll ratings in order to have an analytics-ready data frame.
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
## Exploratory factor analysis in order to know which factors load and how they load
## on the CFA model
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk
factorThree =~ tm + fg + fga + fg_percent + three_fg_percent + ft_percent + trb + blk + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE)
idx <- lavInspect(fit, "case.idx")
fscores <- lavPredict(fit, type = "lv")
for (fs in colnames(fscores)) {
combinedTables[idx, fs] <- fscores[, fs]
}
finalTables <- combinedTables %>% select(school, conf, games, w_l_percent, srs, sos, ap_rank,
factorOne, factorThree, generalFactor)
predictiveModel <- glmer(w_l_percent ~ srs + sos + ap_rank + factorOne +
factorThree + generalFactor + (1 | conf),
family = binomial(link = "probit"), weights = games, data = combinedTables)
finalTables$estimate <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE, fix.intercept.variance = TRUE)$fit
finalTables$lower <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE,
fix.intercept.variance = TRUE)$lwr
finalTables$upper <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE,
fix.intercept.variance = TRUE)$upr
finalTables <- finalTables %>% select(school, conf, estimate, upper, lower) %>%
mutate_if(is.numeric, round, digits = 3)
semPlot::semPaths(fit, what = "std", intercepts = "FALSE")
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
finalTables$estimate <- merTools::predictInterval(merMod = predictiveModel,
newdata = finalTables, level = 0.95, n.sims = 1000,
stat = "mean", type = "probability",
include.resid.var = FALSE, fix.intercept.variance = FALSE)$fit
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
## Author: Dr. Eric William Shannon
## Date Edited: 20191213
## Purpose: FBS Winning Probabilities
## Cleaning the environment os I can load all of the packages
## that I need for this specific project. Creating the negative
## %in% function which is convenient for filtering purposes.
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
fa <- fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
variables <- rownames(f)
write.factors <- functions(loadings, cutoff_p = 0.4, cutoff_n = -0.4, file_names = "factors.csv"){
f <- data.frame(unclass(loadings))
sink(file_name)
for(c in 1:ncol(f)){
variables <- rownmaes(f)
ff <- data.frame(variables, f[,c])
colnames(ff)(2) <- colnames(f)[c]
nd <- subset(ff, ff[,2] > cutoff_p | ff[,2] < cutoff_n)
nd <- droplevels(nd)
cat('____________________________')
cat('\n')
}
sink()
}
write.factors <- functions(loadings, cutoff_p = 0.4, cutoff_n = -0.4, file_names = "factors.csv"){
f <- data.frame(unclass(loadings))
sink(file_name)
for(c in 1:ncol(f)){
variables <- rownmaes(f)
ff <- data.frame(variables, f[,c])
colnames(ff)(2) <- colnames(f)[c]
nd <- subset(ff, ff[,2] > cutoff_p | ff[,2] < cutoff_n)
nd <- droplevels(nd)
cat('____________________________')
cat('\n')
}
sink()
}
write.factors <- function(loadings, cutoff_p = 0.295, cutoff_n = -0.295, file_name = "factors.csv"){
f <- data.frame(unclass(loadings))
sink(file_name)
for(c in 1:ncol(f)){
variables <- rownames(f)
ff <- data.frame(variables, f[,c])
colnames(ff)[2] <- colnames(f)[c]
nd <- subset(ff, ff[,2] > cutoff_p | ff[,2] < cutoff_n)
nd <- droplevels(nd)
write.csv(nd)
cat('____________________________')
cat('\n')
}
sink()
}
write.factors(fa$loadings)
read_csv("factors.csv")
test <-write.factors(fa$loadings)
test
test <- read_csv("factors.csv")
test
View(test)
fa <- fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "tenBerge", fm = "ML", cor = "mixed",
covar = TRUE)
fa
?fa.random
fa <- fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "regression", fm = "ML", cor = "mixed",
covar = TRUE)
fa
?cfa
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk
factorThree =~ tm + fg + fga + fg_percent + three_fg_percent + ft_percent + trb + blk + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE)
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "regression", fm = "ML")
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + trb + ast + stl + blk
factorThree =~ tm + fg + fg_percent + three_fg_percent + ft_percent + orb + blk + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE)
standardizedsolution(fit)
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE, information = "expected")
kutils::semTable(fit)
?kutils::semTable
kutils::semTable(fit, file = "cfaResults", type = "html")
semPlot::semPaths(fit)
semPlot::semPaths(fit, "std", intercepts = FALSE)
semPlot::semPaths(fit, intercepts = FALSE, residuals = TRUE)
semPlot::semPaths(fit, "eq", intercepts = FALSE, residuals = TRUE)
semPlot::semPaths(fit, as.expression = c("nodes", "edges"), sizeMan = 3, sizeInt = 1, size Lat = 4)
semPlot::semPaths(fit, as.expression = c("nodes", "edges"), sizeMan = 3, sizeInt = 1, sizeLat = 4)
semPlot::semPaths(fit, as.expression = c("nodes", "edges"), intercepts = FALSE)
require(semPlot)
graph <- semPaths(fit, whatLabels = "est", style = "lisrel", residuals = TRUE)
rm(graph)
semPaths(fit,whatLabels="est",style="lisrel",
residuals=TRUE, nodeLabels =
c(as.list(c(paste0("x",1:3), paste0("y",1:8))),
list(expression(xi[1]),expression(eta[1]),expression(eta[2]))))
semPaths(fit,whatLabels="est",style="lisrel",
residuals=TRUE, nodeLabels =
c(as.list(c(paste0("x",1:3), paste0("y",1:8))),
list(expression(xi[1]),expression(eta[1]),expression(eta[2]))))
semPaths(fit, rotation = 2, style = "lisrel")
semPaths(fit, rotation = 2, style = "lisrel", curvePivot = TRUE)
semPaths(fit, rotation = 2, style = "lisrel", curvePivot = TRUE, intercepts = FALSE)
semPaths(fit, rotation = 2, curvePivot = TRUE, intercepts = FALSE, stytle = "OpenMx")
semPaths(fit, rotation = 2, curvePivot = TRUE, intercepts = FALSE, style = "OpenMx")
semPaths(fit, est, rotation = 2, curvePivot = TRUE, intercepts = FALSE, style = "OpenMx")
semPaths(fit, "est", rotation = 2, curvePivot = TRUE, intercepts = FALSE, style = "OpenMx")
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "tree2")
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "tree2", intercepts = FALSE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring")
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE, residuals = TRUE)
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
install.packages("semtools")
install.packages("semTools")
semTools::efa.ekc(data = combinedTables[,15:33])
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "regression", fm = "ML")
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + trb + ast + stl + blk
factorThree =~ tm + fg + fg_percent + three_fg_percent + ft_percent + orb + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected")
summary(fit)
?lavOptions
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE)
?cfa
summary(fit, fit.measures = TRUE)
kutils::semTable(fit)
kutils::semTable(fit, file = "../writeup/cfaResults.html", type = "html")
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = FALSE, orthogonal = TRUE,
information = "expected", verbose = TRUE)
(fit, fit.measures = TRUE)
summary(fit, fit.measures = TRUE)
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE, optim.method = "em")
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE)
summary(fit, fit.measures = TRUE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE, residuals = TRUE)
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "regression", fm = "ML")
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg + tov + pf
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + trb + ast + stl + blk
factorThree =~ tm + fg + fg_percent + three_fg_percent + ft_percent + tov
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE, mimic = "Mplus")
modindices(fit)
modindices(fit, sort. = TRUE)
### Checking parameter estimates and model fit.
summary(fit, standardized = TRUE, fit.measures = TRUE)
cov_table <- residuals(fit)$cov
cov_table[upper.tri(cov_table)] <- NA
print(cov_table)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE, residuals = TRUE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = TRUE, residuals = TRUE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE, residuals = TRUE)
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg + tov + pf
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + trb + ast + stl + blk
factorThree =~ ast + tm + fg + fg_percent + three_fg_percent + ft_percent + orb + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE, mimic = "Mplus")
### Checking parameter estimates and model fit.
summary(fit, standardized = TRUE, fit.measures = TRUE)
cov_table <- residuals(fit)$cov
cov_table[upper.tri(cov_table)] <- NA
print(cov_table)
modindices(fit, sort. = TRUE)
semPlot::semPaths(fit, what = c("paths", "est"), whatLabels = "est", layout = "spring", intercepts = FALSE, residuals = TRUE)
lapply(paste('package:',names(sessionInfo()$otherPkgs), sep = ""),
detach,character.only = TRUE,unload = TRUE)
packages <- c("ggthemes", "lavaan", "lme4", "psych", "RCurl", "rlist", "tidyverse", "XML")
lapply(packages, require, character.only = TRUE)
rm(list = ls())
`%!in%` <- negate(`%in%`)
schoolStats <- getURL("https://www.sports-reference.com/cbb/seasons/2020-school-stats.html")
schoolStats <- schoolStats %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("Overall", "School")) %>%
column_to_rownames(., "school")
schoolStats[] <- lapply(schoolStats, function(x) as.numeric(as.character(x)))
conferenceInfo <- getURL("https://www.sports-reference.com/cbb/seasons/2020-ratings.html")
conferenceInfo <- conferenceInfo %>% readHTMLTable(.) %>%
list.clean(., fun = is.null, recursive = FALSE) %>% do.call(rbind.data.frame, .) %>%
janitor::clean_names() %>% remove_rownames() %>% filter(school %!in% c("School", "")) %>%
column_to_rownames(., "school") %>% select(conf, ap_rank)
combinedTables <- schoolStats %>% rownames_to_column(., "school") %>%
left_join(., rownames_to_column(conferenceInfo, "school"), by = "school") %>%
select(school, conf, games = g, wins = w, loss = l, w_l_percent, srs, sos, conf_wins = w_2,
conf_loss = l_2, home_wins = w_3, home_loss = l_3, away_wins = w_4,
away_loss = l_4, tm, opp, mp, fg, fga, fg_percent, three_fg = x3p, three_fga = x3pa,
three_fg_percent = x3p_percent, ft, fta, ft_percent, orb, trb, ast, stl,
blk, tov, pf, ap_rank) %>% mutate(ap_rank = if_else(ap_rank == "", 0, 1))
fa.random(data = combinedTables[,15:33], nfactors = 3, fix = TRUE, rotate = "varimax",
oblique.scores = FALSE, scores = "regression", fm = "ML")
myLavaan <- '
generalFactor =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + ast + stl + blk + trb + fg + tov + pf
factorOne =~ tm + opp + mp + fga + fg_percent + three_fg + three_fg_percent + ft_percent + orb + trb + ast + stl + blk
factorThree =~ ast + tm + fg + fg_percent + three_fg_percent + ft_percent + orb + tov + pf
generalFactor =~ 0*factorOne
generalFactor =~ 0*factorThree
factorOne =~ 0*factorThree
orb ~~ trb
fga ~~ fg
tov ~~ pf
'
fit <- cfa(model = myLavaan, data = combinedTables, cluster = "conf",
std.lv = TRUE, std.ov = TRUE, auto.efa = TRUE, orthogonal = TRUE,
information = "expected", verbose = TRUE, mimic = "Mplus")
### Checking parameter estimates and model fit.
summary(fit, standardized = TRUE, fit.measures = TRUE)
cov_table <- residuals(fit)$cov
cov_table[upper.tri(cov_table)] <- NA
print(cov_table)
### Checking parameter estimates and model fit.
summary(fit, standardized = TRUE, fit.measures = TRUE)
modindices(fit, sort. = TRUE)
